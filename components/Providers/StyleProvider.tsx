import React, { createContext, ReactNode, useContext } from 'react'
import { cssStringFromTheme } from '../../styles/cssStringFromTheme'
import { ThemeVars } from '../../styles/sprinkles.css'
import { lightSeaportTheme } from '../../styles/lightSeaportTheme'

const ThemeIdContext = createContext<string | undefined>(undefined)

const attr = 'data-si'

const createThemeRootProps = (id: string | undefined) => ({ [attr]: id || '' })

const createThemeRootSelector = (id: string | undefined) => {
  if (id && !/^[a-zA-Z0-9_]+$/.test(id)) {
    throw new Error(`Invalid ID: ${id}`)
  }

  return id ? `[${attr}="${id}"]` : `[${attr}]`
}

export const useThemeRootProps = () => {
  const id = useContext(ThemeIdContext)
  return createThemeRootProps(id)
}

export type Theme =
  | ThemeVars
  | {
      lightMode: ThemeVars
      darkMode: ThemeVars
    }

export interface VanillaExtractProviderProps {
  id?: string
  children: ReactNode
  theme?: Theme | null
}

const defaultTheme = lightSeaportTheme()

function StyleProvider({
  id,
  theme = defaultTheme,
  children,
}: VanillaExtractProviderProps) {
  if (typeof theme === 'function') {
    throw new Error(
      'A theme function was provided to the "theme" prop instead of a theme object. You must execute this function to get the resulting theme object.'
    )
  }

  const selector = createThemeRootSelector(id)

  return (
    <ThemeIdContext.Provider value={id}>
      {theme 
        ?
          <div {...createThemeRootProps(id)} >
            <style
              // eslint-disable-next-line react/no-danger
              dangerouslySetInnerHTML={{
                // Selectors are sanitized to only contain alphanumeric
                // and underscore characters. Theme values generated by
                // cssStringFromTheme are sanitized, removing
                // characters that terminate values / HTML tags.
                __html: [
                `${selector}{${cssStringFromTheme(
                  'lightMode' in theme ? theme.lightMode : theme
                )}}`,

                'darkMode' in theme
                    ? 
                      `@media(prefers-color-scheme:dark){${selector}{${cssStringFromTheme(
                        theme.darkMode,
                        { extends: theme.lightMode }
                      )}}}`
                    : null
                ].join('')
              }}
            />
              {children}
          </div>
        :
          children
        }
    </ThemeIdContext.Provider>
  )
}

export default StyleProvider